Q) Write a program to handle multiple exceptions using single catch block?

class Test  
{
	public static void main(String[] args) 
	{
		try
		{
			//System.out.println(10/0);
			
			/*
			int[] arr=null;
			System.out.println(arr[0]);
			*/
			
			Thread.currentThread().setPriority(11);
		}
		catch (ArithmeticException | NullPointerException | IllegalArgumentException e)
		{
			e.printStackTrace();
		}
	}
}


Garbage Collector 
=================
Garbage collector is also known as Daemon thread.

A thread which is running in a background to provide services is called daemon thread.

It is a programming feature that manages memory allocation and deallocation of a program.

There are two ways to call garbage collector in java.

1) System.gc() 

2) Runtime.getRuntime().gc() 

1) System.gc() 
---------------
class Test  
{
	//instance variable 
	int i=10;
	
	public static void main(String[] args) 
	{
		Test t = new Test();
		System.out.println(t.i); // 10
		
		t = null;
		
		System.gc();
	}
	public void finalize()
	{
		System.out.println("Finalize method");
	}
}


2) Runtime.getRuntime().gc() 
------------------------------
class Test  
{
	//instance variable 
	int i=10;
	
	public static void main(String[] args) 
	{
		Test t = new Test();
		System.out.println(t.i); // 10
		
		t = null;
		
		Runtime.getRuntime().gc();
	}
	public void finalize()
	{
		System.out.println("Finalize method");
	}
}

try-with-resources
===================
A try-with-resources introduced in Java 7.

A try-with-resource is a try statement that declares one or more resources.

A try-with-resource ensures that each resource will be closed at the end of the program.

ex:
---
import java.util.Scanner;
class Test  
{
	public static void main(String[] args) 
	{
		try(Scanner sc = new Scanner(System.in))
		{
			System.out.println("Enter the name :");
			String name = sc.next();
			System.out.println("Welcome :"+name);
		}
		catch (Exception e)
		{
			e.printStackTrace();
		}
		
	}
}


throws statement
================
If any checked exception raised in our program so we must and should handle that exception by using try and catch block or by using throws statement.

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		try
		{
			Thread.sleep(3000);
			System.out.println("Welcome to Java Class");
		}
		catch (InterruptedException ie)
		{
			ie.printStackTrace();
		}
			
	}
}

ex:
---
class Test  
{
	public static void main(String[] args)throws InterruptedException
	{
			Thread.sleep(5000);
			System.out.println("Welcome to Java Class");
		
	}
}

throw statement 
===============
Somtimes we will create exception object explicitly and handover to JVM manually by using throw statement.

ex:
	throw new ArithmeticException("Don't divide by zero");

Diagram: class41.1


2) User defined exceptions 
==========================
Exceptions which are created by the user based on the application requirements are called userdefined exceptions or custom exceptions.

ex:
	NoInterestInJavaException 
	NoPracticeException 
	NoJobException 
	
Program
--------
import java.util.Scanner;
class TooYoungException extends RuntimeException 
{
	TooYoungException(String s)
	{
		super(s);
	}
}
class TooOldException extends RuntimeException 
{
	TooOldException(String s)
	{
		super(s);
	}
}
class Test  
{
	public static void main(String[] args)
	{
		Scanner sc = new Scanner(System.in);
		System.out.println("Enter the age :");
		int age = sc.nextInt();
		
		if(age<18)
			throw new TooYoungException("U r not eligible to vote");
		else
			throw new TooOldException("U r eligible to vote");
	}
}

Singleton class 
===============
A class which allows us to create only one object is called singleton class.

A singleton is one of the design pattern which ensures that a class must have only one instance.

Using singleton class we can improve the performance of an application.

To create a singleton class we required private constructor and static method.

ex:
---
class Singleton 
{
	static Singleton single=null;
	
	private Singleton()
	{
	}
	
	public static Singleton getInstance()
	{
		if(single==null)
		{
			single = new Singleton();
		}
		return single;
	}
}
class Test  
{
	public static void main(String[] args)
	{
		Singleton s1 = Singleton.getInstance();
		System.out.println(s1.hashCode());
		
		Singleton s2 = Singleton.getInstance();
		System.out.println(s2.hashCode());
	}
}



java.io package 
===============

File
====
	File f = new File("abc.txt");

File checks is there any "abc.txt" file already created or not. If it is created then 'f' simply refers to that file. If it is not created then File class will not create any physical file.

ex:
---
import java.io.*;
class Test  
{
	public static void main(String[] args)
	{
		File f = new File("abc.txt");
		System.out.println(f.exists()); // false 
	}
}

A File can be used to create a physical file.

ex:
---
import java.io.*;
class Test  
{
	public static void main(String[] args)
	{
		try
		{
			File f = new File("abc.txt");
			System.out.println(f.exists()); // false 
		
			f.createNewFile();
			System.out.println(f.exists()); // true 
		}
		catch (IOException ioe)
		{
			ioe.printStackTrace();
		}
		
	}
}


A File can be used to create a directory.

ex:
---
import java.io.*;
class Test  
{
	public static void main(String[] args)
	{
			File f = new File("ihub");
			System.out.println(f.exists()); // false 
		
			f.mkdir();
			System.out.println(f.exists()); // true 
	
	}
}



































	
































































