Collection 
==========
Collection is an interface which is present in java.util package.

It is a root interface for entire Collection Framework.

If we want to represent group of individual objects in a single entity then we need to use Collection.

Collection interface contains some common methods which are available for entire Collection objects.

ex:
	cmd>  javap  java.util.Collection 

Methods
--------
  public abstract int size();
  public abstract boolean isEmpty();
  public abstract boolean contains(java.lang.Object);
  public abstract java.util.Iterator<E> iterator();
  public abstract java.lang.Object[] toArray();
  public abstract <T> T[] toArray(T[]);
  public default <T> T[] toArray(java.util.function.IntFunction<T[]>);
  public abstract boolean add(E);
  public abstract boolean remove(java.lang.Object);
  public abstract boolean containsAll(java.util.Collection<?>);
  public abstract boolean addAll(java.util.Collection<? extends E>);
  public abstract boolean removeAll(java.util.Collection<?>);
  public default boolean removeIf(java.util.function.Predicate<? super E>);
  public abstract boolean retainAll(java.util.Collection<?>);
  public abstract void clear();
  public abstract boolean equals(java.lang.Object);
  and etc.

List 
=====
It is a child interface of Collection interface.

If we want to represent group of individual objects in a single entity where duplicates are allowed and order is preserved then we need to use List interface.

Diagram: class44.1

ArrayList 
----------
The underlying data structure is resizable array or growable array.

Duplicate objects are allowed.

Insertion order is preserved.

Hetrogenous objects are allowed.

Null insertion is possible.

It implements List, Serializable, Cloneable and RandomAccess interfaces.

ex:
---
import java.util.*;
class Test  
{
	public static void main(String[] args) 
	{
		ArrayList al = new ArrayList();
		al.add("one");
		al.add("two");
		al.add("three");
		System.out.println(al); // [one,two,three]
		
		al.add("one");
		System.out.println(al); // [one,two,three,one]
		
		al.add(10);
		System.out.println(al); // [one,two,three,one,10]
		
		al.add(null);
		System.out.println(al); // [one,two,three,one,10,null]
	}
}

ex:
---
import java.util.*;
class Test  
{
	public static void main(String[] args) 
	{
		ArrayList<String> al = new ArrayList<String>();
		al.add("one");
		al.add("two");
		al.add("three");
		System.out.println(al); // [one,two,three]
		
		al.add("one");
		System.out.println(al); // [one,two,three,one]
		
		al.add(null);
		System.out.println(al); // [one,two,three,one,null]
	}
}

ex:
---
import java.util.*;
class Test  
{
	public static void main(String[] args) 
	{
		ArrayList<String> al = new ArrayList<String>();
		al.add("one");
		al.add("two");
		al.add("three");
		System.out.println(al); // [one,two,three]
		
		System.out.println(al.isEmpty()); // false 
		
		al.add(1,"gogo");
		System.out.println(al); // [one,gogo,two,three]
		
		al.remove("gogo");
		System.out.println(al); // [one,two,three]
		
		al.clear();
		System.out.println(al);// []
	}
}

ex:
---
import java.util.*;
class Test  
{
	public static void main(String[] args) 
	{
		ArrayList<String> al = new ArrayList<String>();
		al.add("one");
		al.add("two");
		al.add("three");
		System.out.println(al); // [one,two,three]
		
		al.set(1,"Ten");
		System.out.println(al); // [one,Ten,three]

		for(int i=0;i<al.size();i++)
		{
			System.out.println(al.get(i));
		}
		
	}
}

ex:
--
import java.util.*;
class Test  
{
	public static void main(String[] args) 
	{
		List<Integer> list = new ArrayList<Integer>();
		list.add(10);
		list.add(2);
		list.add(5);
		System.out.println(list); //[10,2,5]
		
	}
}

ex:
---
import java.util.*;
class Test  
{
	public static void main(String[] args) 
	{
		List<Integer> list = List.of(6,9,1,3,5);
		System.out.println(list); //[6, 9, 1, 3, 5]	
	}
}

ex:
--
import java.util.*;
class Test  
{
	public static void main(String[] args) 
	{
		List<Integer> list = Arrays.asList(9,1,5,2,7);
		System.out.println(list); //[9,1,5,2,7]	
	}
}

Q) Write a java program to store student details in ArrayList and display it?

import java.util.*;
class Student
{
	private int studId;
	private String studName;
	private double studFee;
	
	Student(int studId,String studName,double studFee)
	{
		this.studId=studId;
		this.studName=studName;
		this.studFee=studFee;
	}
	
	public String toString()
	{
		return studId+" "+studName+" "+studFee;
	}
}
class Test  
{
	public static void main(String[] args) 
	{
		ArrayList<Student> al = new ArrayList<Student>();
		al.add(new Student(101,"raja",10000d));
		al.add(new Student(102,"ravi",20000d));
		al.add(new Student(103,"ramana",30000d));
		al.add(new Student(104,"rakesh",40000d));
		
		for(int i=0;i<al.size();i++)
		{
			System.out.println(al.get(i));
		}
	}
}


Q) Write a java program to display intersect elements?

input:
	html  java  spring   css   bootstrap 
	css   python html    bootstrap  django 

output:
	html  css  bootstrap 


import java.util.*;
class Test  
{
	public static void main(String[] args) 
	{
		ArrayList<String> list1 = new ArrayList<String>();
		list1.add("html");
		list1.add("java");
		list1.add("spring");
		list1.add("css");
		list1.add("bootstrap");
		
		ArrayList<String> list2 = new ArrayList<String>();
		list2.add("css");
		list2.add("python");
		list2.add("html");
		list2.add("bootstrap");
		list2.add("django");
		
		list1.retainAll(list2);
		System.out.println(list1);
	}
}


LinkedList 
------------
The underlying data structure is double LinkedList.

Duplicate objects are allowed.

Insertion order is preserved.

Hetrogeneous objects are allowed.

Null insertion is possible.

It implements List, Serializable, Cloneable and Deque interface.

LinkedList class contains following methods.
ex:
	public E getFirst();
  	public E getLast();
  	public E removeFirst();
  	public E removeLast();
  	public void addFirst(E);
  	public void addLast(E);

ex:
----
import java.util.*;
class Test  
{
	public static void main(String[] args) 
	{
		LinkedList ll = new LinkedList();
		ll.add("one");
		ll.add("two");
		ll.add("three");
		System.out.println(ll); // [one,two,three]
		
		ll.add("one");
		System.out.println(ll); // [one,two,three,one]

		ll.add(10);
		System.out.println(ll); // [one,two,three,one,10]
		
		ll.add(null);
		System.out.println(ll); // [one,two,three,one,10,null]
	}
}

ex:
---
import java.util.*;
class Test  
{
	public static void main(String[] args) 
	{
		LinkedList<String> ll = new LinkedList<String>();
		ll.add("one");
		ll.add("two");
		ll.add("three");
		System.out.println(ll); // [one,two,three]
		
		ll.add("one");
		System.out.println(ll); // [one,two,three,one]
		
		ll.add(null);
		System.out.println(ll); // [one,two,three,one,null]
	}
}

ex:
---
import java.util.*;
class Test  
{
	public static void main(String[] args) 
	{
		LinkedList<String> ll = new LinkedList<String>();
		ll.add("one");
		ll.add("two");
		ll.add("three");
		System.out.println(ll); // [one,two,three]
		
		ll.addFirst("gogo");
		ll.addLast("jojo");
		System.out.println(ll); // [gogo,one,two,three,jojo]
		
		System.out.println(ll.getFirst());// gogo 
		System.out.println(ll.getLast()); // jojo
		
		ll.removeFirst();
		ll.removeLast();
		System.out.println(ll); // [one,two,three]
	}
}

ex:
---
import java.util.*;
class Test  
{
	public static void main(String[] args) 
	{
		LinkedList<String> ll1 = new LinkedList<String>();
		ll1.add("one");
		ll1.add("two");
		ll1.add("three");
		System.out.println(ll1); // [one,two,three]
		
		
		LinkedList<String> ll2 = new LinkedList<String>();
		ll2.add("raja");
		System.out.println(ll2); // [raja]
		
		ll2.addAll(ll1);
		System.out.println(ll2); // [raja,one,two,three]
		
		System.out.println(ll2.containsAll(ll1)); // true 
		
		ll2.removeAll(ll1);
		System.out.println(ll2); //[raja]
		
		
	}
}

Q) What is difference between ArrayList and LinkedList ?

ArrayList					LinkedList 
---------					-----------
The underlying data structure is resizable 	The underlying data structure is doubly 
array or growable array.			LinkedList.

It is best of storing and retrieving the 	It is best for manipulating the elements.
elements.

Memory location of ArrayList elements 		Memory location of LinkedList elements 
is contiguous.					is not contiguous.

When ArrayList is initialized a default		There is no case of default capacity.
capacity 10 assigned to it.


Vector 
------------
The underlying data structure is resizable array or growable array.

Duplicate objects are allowed.

Insertion order is preserved.

Hetrogeneous objects are allowed.

Null insertion is possible.

Vector is synchronized. At a time only one thread is allowed to execute.Hence Vector is thread safe.

Vector class contains following methods.
ex:
	public synchronized void addElement(E);
	public synchronized E firstElement();
  	public synchronized E lastElement();
	public synchronized void removeElementAt(int);
	public synchronized void removeAllElements();
	and etc.

ex:
---
import java.util.*;
class Test  
{
	public static void main(String[] args) 
	{
		Vector v = new Vector();
		System.out.println(v.capacity()); 
		
		for(int i=1;i<=10;i++)
		{
			v.addElement(i);
		}
		System.out.println(v); // [1,2,3,4,5,6,7,8,9,10]
		
		System.out.println(v.firstElement());// 1 
		System.out.println(v.lastElement()); // 10
		
		v.removeElementAt(4); 
		System.out.println(v); // [1,2,3,4,6,7,8,9,10]
		
		v.removeAllElements();
		System.out.println(v); // []
	}
}

ex:
---
import java.util.*;
class Test  
{
	public static void main(String[] args) 
	{
		Vector v = new Vector();
		System.out.println(v.capacity()); 
		
		for(int i=1;i<=10;i++)
		{
			v.add(i);
		}
		System.out.println(v); // [1,2,3,4,5,6,7,8,9,10]
		
		System.out.println(v.get(0));// 1 
		System.out.println(v.get(v.size()-1)); // 10
		
		v.remove(4); 
		System.out.println(v); // [1,2,3,4,6,7,8,9,10]
		
		v.clear();
		System.out.println(v); // []
	}
}

Q) What is the difference between ArrayList and Vector?

ArrayList					Vector 
--------					--------
It is a non-legacy class.			It is a lagacy class.

It is introduced in 1.2 version.		It is introduced in 1.0 version.

Methods are not synchronized.			Methods are synchronized.

Multiple threads are allowed to execute.	At a time only one thread is allowed to 
Hence ArrayList is not thread safe.		execute.Hence Vector is thread safe.

There is no waiting time of a threads		Waiting time of a thread will increase  
effectively performance is high.		effectively performance is low.






























	




























































































































