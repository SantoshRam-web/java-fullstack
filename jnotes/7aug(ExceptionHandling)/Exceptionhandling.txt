Exception Handling 
==================

Q) What is the difference between Exception and Error?

Exception 
---------
	Exception is a problem for which we can provide solution programmatically.
	Exception will raise due to syntax errors.
	ex:
		ArithmeticException 
		FileNotFoundException 
		IllegalArgumentException 

Error
-----
	Error is a problem for which we can't provide solution programmatically.
	Error will raise due to lack of system resources.
	ex:
		OutOfMemoryError 
		StackOverFlowError
		LinkageError 


As a part of java application development, it is a responsibility of a programmer to provide smooth termination for every java program.

We have two types of terminations.

1) Smooth termination / Graceful termination
--------------------------------------------
During the program execution suppose if we are not getting any interruption in the middle of the program such type of termination is called smooth termination.

ex:
class Test  
{
	public static void main(String[] args) 
	{
		System.out.println("Hello World!");
	}
}

2) Abnormal termination 
------------------------
During the program execution suppose if we are getting some interruptions in the middle of the program such type of termination is called abnormal termination.

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		System.out.println(10/0);
	}
}

If any exception raised in our program we must and should handle that exception otherwise our program will terminates abnormally.

Exception will display name of the exception, description of the exception and line number of the exception.


Types of Errors 
================
We have three types of errors.

1) Logical Error 
----------------
	program: 
		int a=10,b=20;
		System.out.println("sum of two numbers is ="+a+b); 

	o/p:
		sum of two numbers is = 1020

2) Compile Time Error 
---------------------
	Program:
			System.out.println("Hello World")

	o/p:
			C.T.E: semicolon is missing 

3) Runtime Error 
----------------
	Runtime errors are also known exceptions.
	ex:
		Dream11


Exception 
=========
It is a unwanted , unexpect event which disturbs normal flow of our program.

Exceptions always raised at runtime so they are also known as runtime events.

The main objective of exception handling is to provide graceful termination.

In java, exceptions are divided into two types.

1) Predefined exceptions   

2) Userdefined exceptions 

1) Predefined exceptions 
-------------------------
Built-in exceptions are called predefined exceptions.

It is classified into two types.

Diagram: class40.1

i) Checked exceptions 
---------------------
Exceptions which are checked by the compiler at the time of compilation is called checked exceptions.
ex:
	InterruptedException 
	IOException 
	FileNotFoundException 

ii) Unchecked exceptions 
-------------------------
Exceptions which are checked by the JVM at the time of runtime is called unchecked exceptions.
ex:
	ArithmeticException 
	ClassCastException 
	IllegalArgumentException 


If any checked exception raised in our program we must and should handle that exception by using try and catch block.

try block 
-----------
It is a block which contains risky code.

It associates with catch block or finally block.

If any exception raised in try block then it won't be executed.

It is used to throw the exception to catch block.

catch block 
-----------
It is a block which contains error handling code.

It always associate with try block.

It is used to catch the exception which is thrown by try block.

If there is no exception in try block then catch block won't be executed.

A catch block will take exception name as parameter and that name must match with exception class name.

syntax:
-------
	try
	{
		-
		- // Risky Code 
		-
	}
	catch(Exception e)
	{
		-
		- // Error Handling Code 
		-
	}


ex:
----
class Test  
{
	public static void main(String[] args) 
	{
		try
		{
			System.out.println("try-block");
		}
		catch (Exception e)
		{
			System.out.println("catch-block");
		}
	}
}
o/p:
	try-block 

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		try
		{
			System.out.println(10/0);
		}
		catch (ArithmeticException ae)
		{
			System.out.println("catch-block");
		}
	}
}
o/p:
	catch-block 

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		try
		{
			System.out.println("stmt1");
			System.out.println(10/0);
			System.out.println("stmt2");
		}
		catch (ArithmeticException ae)
		{
			System.out.println("catch-block");
		}
	}
}
o/p:
	stmt1
	catch-block 

Various ways to display exception details 
=========================================
Throwable class defines following three methods to display exception details.

1) printStackTrace() 
-------------------
It is used to display name of the exception , description of the exception and line number of the exception.

2) toString() 
------------
It is used to display name of the exception and description of the exception.

3) getMessage() 
--------------
It is used to display description of the exception.

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		try
		{
			System.out.println(10/0);
		}
		catch (ArithmeticException ae)
		{
			ae.printStackTrace();
			
			System.out.println("===================");
			
			System.out.println(ae.toString());
			
			System.out.println("===================");
			
			System.out.println(ae.getMessage());
		}
	}
}

A try block with multiple catch blocks
=======================================
A try block can have multiple catch blocks.

If a try block contains multiple catch blocks then order of catch blocks is very important,it should be from child to parent but not from parent to child.

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		try
		{
			System.out.println(10/0);
		}
		catch (ArithmeticException ae)
		{
			System.out.println("From AE");
		}
		catch(RuntimeException re)
		{
			System.out.println("From RE");
		}
		catch(Exception e)
		{
			System.out.println("From E");
		}
	}
}

finally block 
-------------
It is never recommanded to maintain cleanup code in try block because if any exception raised in try block then it won't be executed.

It is never recommanded to maintain cleanup code in catch block because if there is no exception in try block then catch block won't be executed.

We need a place where we can maintain cleanup code and it should execute irrespective exception raised or not such block is called finally block.

syntax:
------
	try
	{
		-
		- // Risky Code 
		-
	}
	catch(Exception e)
	{
		-
		- // Error Handling Code 
		-
	}
	finally
	{
		-
		- // Cleanup code 
		-
	}	

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		try
		{
			System.out.println("try-block");
		}
		catch (Exception e)
		{
			e.printStackTrace();
		}
		finally
		{
			System.out.println("finally-block");
		}
	}
}
o/p:
	try-block 
	finally-block 

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		try
		{
			System.out.println(10/0);
		}
		catch (ArithmeticException ae)
		{
			ae.printStackTrace();
		}
		finally
		{
			System.out.println("finally-block");
		}
	}
}
o/p:
	java.lang.ArithmeticException: / by zero
        at Test.main(Test.java:7)
	finally-block

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		int i=1;
		
		try
		{
			i++;
		}
		catch (Exception e)
		{
			i++;
		}
		finally
		{
			i++;
		}
		System.out.println(i);//3
	}
}

A try with finally combination is valid in java.

ex:
---
class Test  
{
	public static void main(String[] args) 
	{	
		try
		{
			System.out.println("try-block");
		}
		finally
		{
			System.out.println("finally-block");
		}
	}
}
o/p:
	try-block 
	finally-block 

ex:
-----
import java.util.Scanner;
class Test  
{
	public static void main(String[] args) 
	{	
		Scanner sc = null;
		String name = null;
		try
		{
			sc = new Scanner(System.in);
			System.out.println("Enter the name :");
			name = sc.next();
			System.out.println("Welcome :"+name);
		}
		catch (Exception e)
		{
			e.printStackTrace();
		}
		finally
		{
			sc.close();
		}
	}
}

Q) What is the difference between final, finally and finalize ?

final 
-----
It is a modifier which is applicable for variables ,methods and classes.
If we declare any variable as final then reinitialization of that variable is not possible.
If we declare any method as final then overriding of that method is not possible.
If we declare any class as final then creating child class is not possible.

finally 
-------
It is a block which contains cleanup code and it executes irrespective of exceptions are raised or not. Handle or not.

finalize 
--------
It is a method called by garbage collector just before destroying an object for clenaup activity.






















































































































































































