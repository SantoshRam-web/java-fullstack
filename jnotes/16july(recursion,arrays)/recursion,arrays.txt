Recursion 
==========
A method which call itself for many number of times is called recursion.

Recursion is similar to loops. 

Whenever we use recursion we should not use loops.


Q) Write a java program to display 10 natural numbers without using loop?

class Test  
{
	public static void main(String[] args) 
	{
		//caller method
		display(1);
	}
	//callie method 
	public static void display(int i)
	{
		if(i<=10)
		{
			System.out.print(i+" "); // 1 2 3 4 5 6 7 8 9 10
			
			display(i+1);
		}
	}
}


Q) Write a java program to perform sum of two numbers without using arithmetic operator?

import java.util.Scanner;
class Test  
{
	public static void main(String[] args) 
	{
		Scanner sc = new Scanner(System.in);
		
		System.out.println("Enter the first number :");
		int a = sc.nextInt();//5
		
		System.out.println("Enter the second number :");
		int b = sc.nextInt();//10
		
		//caller method 
		System.out.println(sum(a,b));
	}
	//callie method 
	public static int sum(int a,int b)
	{
		if(a==0)
			return b;
		
		return sum(--a,++b);
	}
}


Q) Write a java program to find out factorial of a given number using recursion?

import java.util.Scanner;
class Test  
{
	public static void main(String[] args) 
	{
		Scanner sc = new Scanner(System.in);
		
		System.out.println("Enter the first number :");
		int n=sc.nextInt();//5
		
		//caller method 
		System.out.println(factorial(n));
		
	}
	//callie method 
	public static int factorial(int n)
	{
		if(n<0)
			return -1;
		if(n==0)
			return 1;
		
		return n*factorial(n-1);
	}
}

Q) Write a java program to find out N-th Element of fibonacci series ?

fibonacci sequence : 0 1 1 2 3 5 8 .....

input:
	4

output:
	2

import java.util.Scanner;
class Test  
{
	public static void main(String[] args) 
	{
		Scanner sc = new Scanner(System.in);
		
		System.out.println("Enter the first number :");
		int n=sc.nextInt();//4
		
		//caller method 
		System.out.println(fibonaccie(n));	
	}
	//callie method 
	public static int fibonaccie(int n)
	{
			if(n==0 || n==1)
				return 0;
			if(n==2)
				return 1;
			
			return fibonaccie(n-1)+fibonaccie(n-2);
	}
}

Assignment 
==========
Q) Write a java program to display reverse of a given number using recursion?



Arrays 
======
In a normal variable we can store only one value at a time.

To store multiple values in a single variable then we need to use arrays.

Array is a collection of homogeneous data elements.

The main advantages of arrays are 

1) We can represent multiple elements using single variable name.
   ex:
	int[] arr = {10,20,30};

2) Performance point of view arrays are recommanded to use.

The main disadvantages of arrays are 

1) Arrays are fixed in size. Once if we create an array there is no chance of increasing or 
   decreasing the size of an array.

2) To use array concept in advanced we should know what is the size of an array which is 
   always not possible.

In java, arrays are classified into three types.

1) Single Dimensional Array 

2) Double Dimensional Array 

3) Multi Dimensional Array 


Array Declaration 
-----------------
At the time of array declaration we should not specify array size.

					Array 
	|--------------------------------|--------------------------------------|
Single Dimensional Array	Double Dimensional Array		Multi Dimensional Array

int[] arr;			int[][] arr;				int[][][] arr;
int  []arr;			int  [][]arr;				int  [][][]arr;
int  arr[];			int  arr[][];				int arr[][][];
				int[] []arr;				int[][] []arr;
				int[] arr[];				int[][] arr[];
				int  []arr[];				int[]  [][]arr;
									int[]  arr[][];
									int[]  []arr[];
									int   [][]arr[];
									int  []arr[][];

Array Creation 
-------------
In java, every array consider as an object. Hence we will use new operator to create an array.

Diagram: class24.1

Rule to constructor an array 
---------------------------
Rule1:
------
	At the time of array creation compulsary we need to specify array size.
	ex:
		int[] arr = new int[3]; 
		int[] arr = new int[]; // C.T.E Array Dimension Missing   

Rule2:
------
	It is legal to have an array size with zero.
	ex:
		int[] arr = new int[0];
		System.out.println(arr.length); // 0 

Rule3:
------
	We can't take negative numbers as an array size otherwise we will get 
	runtime exception called NegativeArraySizeException.
	ex:
		int[] arr = new int[-3]; // R.E NegativeArraySizeException

Rule4:
------
	The allowed datatype of an array size is byte,short,int and char.
	If we take other datatypes then we will get compile time error.
	ex:
		int[] arr = new int['a'];

		byte b =10;
		int[] arr = new int[b]; 

		int[] arr = new int[10.5f]; // C.T.E 


Rule5:
------
	The maximum length we can take for an array size is maximum length of integer.
	ex:
		int[] arr = new int[2147483647];

Array initialization 
----------------------
Once if we create an array, every array element is initialized with default values.

If we are not happy with default values then we can change with customized values.

Diagram: class24.2


Array Declaration, Array Creation and Array Initialization using single line 
============================================================================

	int[] arr;
	arr = new int[3];
	arr[0]=10;
	arr[1]=20;
	arr[2]=30;	==>	int[] arr = {10,20,30};

			==>	char[] carr = {'a','b','c'};

			==>	String[] sarr = {"hi","hello","bye"};

Q) What is the difference between length and length() ?

length 
------
It is final variable which is applicable for arrays.

It returns size of an array.

ex:
	int[] arr = new int[3];
	System.out.println(arr.length); // 3

length()
--------
It is predefine method which is applicable for String objects.

It will return number of characters present in a string.

ex:
	String str="ihub";
	System.out.println(str.length()); // 4

Single Dimensional Array Programs
=================================

Q) Write a java program to accept some array elements and display them?

import java.util.Scanner;
class Test  
{
	public static void main(String[] args) 
	{
		Scanner sc = new Scanner(System.in);
		
		System.out.println("Enter the array size :");
		int size = sc.nextInt();//5
		
		int[] arr = new int[size];
		
		//inserting elements 
		for(int i=0;i<arr.length;i++)
		{
			System.out.println("Enter the element :");
			arr[i]= sc.nextInt();
		}
		
		//display elements
		for(int i=0;i<arr.length;i++)
		{
			System.out.print(arr[i]+" ");
		}
	}
}
	
for each loop
=============
It is used to iterate the elements/objects from arrays/collections.

syntax:
-------
	for(datatype  variable : array_name)
	{
		-
		- //code to be execute 
		-
	}

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		int[] arr = {7,9,1,4,2};
		
		//for each loop
		for(int i : arr)
		{
			System.out.print(i+" ");
		}
	}
}
	


































































































































































