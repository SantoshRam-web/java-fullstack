3) Logical operators 
====================

Logical AND operator (&&)
--------------------------
Logical AND operator deals with boolean values either true or false.

Truth table 
-----------
T	T	= T
T	F	= F
F	T	= F
F	F	= F

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		System.out.println(true && true); // true 
		
		System.out.println(true && false); // false
		
		System.out.println(false && true); // false 
		
		System.out.println(false && false); // false 
	}
}
 
ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		boolean b = (5>2) && (6<10);
		
		System.out.println(b); // true 
	}
}


ex:
----
class Test  
{
	public static void main(String[] args) 
	{
		String str = ((5>20) && (6<10))?"Hi":"Bye";
		
		System.out.println(str); // Bye
	}
}


Logical OR operator (||)
-------------------------
Logical OR operator deals with boolean values either true or false.

Truth table 
----------
T	T	= T
T	F	= T 
F	T	= T
F	F	= F

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		System.out.println(true || true); // true 
		System.out.println(true || false); // true  
		System.out.println(false || true); // true 
		System.out.println(false || false); // false 
	}
}

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		boolean b = (5>20) || (6<1);
		
		System.out.println(b); // false 
	}
}

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		boolean b = (5>20) || (6<1) && true;
		
		System.out.println(b); // false
	}
}

Logical NOT operator (!)
------------------------
Logical NOT operator deals with boolean values either true or false.

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		boolean b = !(5>2);
		
		System.out.println(b); // false 
	}
}

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		boolean b = !(5>20);
		
		System.out.println(b); // true
	}
}

How to convert decimal number to binary number 
--------------------------------------------

	Decimal number : 10 
	Binary number  : 1010

	2|10
         ---- 0 
	2|5
	 ---- 1 
	2|2
	 ---- 0		^
	  1		|
			|
	-----------------
	1010


How to convert binary number to decimal number?

	binary number : 1010
	decimal number : 10

	1010   <---

	0*1 + 1*2 + 0*4 + 1*8

	0 + 2 + 0 + 8 = 10 


4) Bitwise operators 
=====================

Bitwise AND operator (&)
------------------------
Bitwise AND operator deals with binary values.

Truth table 
-----------
T	T	= T
T	F	= F
F	T	= F 
F	F	= F 

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		int a = 10, b = 15;
		
		int c = a & b;
		
		System.out.println(c); // 10
	}
}
/*
		10 - 1010
		15 - 1111
		----------
		&  - 1010

*/

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		int a = 2, b = 3;
		
		int c = a & b;
		
		System.out.println(c); // 2
	}
}
/*
		2 - 0010
		3 - 0011
		--------
		& - 0010  <---
		
		0*1 + 1*2  + 0*4  + 0*8 
		
		0 + 2 + 0 + 0 = 2 
*/


Bitwise OR operator (|)
-----------------------
Bitwise OR operator deals binary values.

Truth table 
------------
T	T	= T
T	F	= T
F	T 	= T
F	F	= F 

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		int a=10, b=5;
		
		int c = a | b;
		
		System.out.println(c); // 15
	}
}
/*
	 10 - 1010
	 5  - 0101
	 ----------
	 |  - 1111 <----
	 
	 1*1 + 1*2 + 1*4 + 1*8
	 
	 1 + 2 + 4 + 8 = 15 
*/

Bitwise XOR operator (^)
-------------------------
Bitwise XOR operator deals with binary values.

Truth table 
------------
T	T	= F
T	F	= T 
F	T	= T
F	F 	= F 

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		int a=10, b=15;
		
		int c = a ^ b;
		
		System.out.println(c); // 5
	}
}
/*
	 10 - 1010
	 15 - 1111
	 ----------
	 ^  - 0101
*/


Bitwise NOT operator (~)
-------------------------
syntax
------
	-(n+1);

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		int i = ~10;
		
		System.out.println(i); // -11
	}
}

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		int i = ~55;
		
		System.out.println(i); // -56
	}
}


ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		int i = ~(-55);
		
		System.out.println(i); // 54
	}
}


Q) Write a java program to check given number is even or odd?

import java.util.Scanner;
class Test 
{
	public static void main(String[] args)
	{
		Scanner sc = new Scanner(System.in);
		
		System.out.println("Enter the number :");
		int n = sc.nextInt();
		
		String str = ((n&1)==0)?"It is even number":"It is odd number";
		
		System.out.println(str); 
	}
}

5) Arithmetic operators 
=======================
% - modules 
/ - division 
* - multiplication 
+ - addition 
- - subtraction 

ex:
---

class Test 
{
	public static void main(String[] args)
	{
		int i = 5+6/3+6/10+7%2+8%10+6*3+4-12;
		System.out.println(i);
	}
}
/*
		5 + 6/3 + 6/10 + 7%2 + 8%10 + 6*3 + 4 - 12
		
		5 + 2 + 0 + 1 + 8 + 18 + 4 - 12
		
		38 - 12  = 26

*/


6) Relational operators 
========================

ex:
---

class Test 
{
	public static void main(String[] args)
	{
		System.out.println(10 > 20); // false
		
		System.out.println(10 >= 20); // false 
		
		System.out.println(10 < 20); // true 
		
		System.out.println(10 <= 10); // true 
 	}
}

ex:
---

class Test 
{
	public static void main(String[] args)
	{
		System.out.println(10 == 20); // false
		
		System.out.println(10 != 20); // true
		
		System.out.println(10 == 10); // true 
		
		System.out.println(10 != 10); // false
 	}
}

7) Shift operators 
===================

Right Shift operator (>>)
--------------------------
10 >> 1 =  10/2

10 >> 2 =  10/4

10 >> 3 = 10/8

ex:
---

class Test 
{
	public static void main(String[] args)
	{
		int i = 10 >> 4;
		
		System.out.println(i); // 10/16 = 0 
 	}
}

ex:
---

class Test 
{
	public static void main(String[] args)
	{
		int i = 100 >> 5;
		
		System.out.println(i); // 100 / 32 = 3 
 	}
}



Left Shift operator (<<)
--------------------------
10 << 1 =  10*2

10 << 2 =  10*4

10 << 3 = 10*8

ex:
---

class Test 
{
	public static void main(String[] args)
	{
		int i = 10 << 4;
		
		System.out.println(i); // 10 * 16 = 160
 	}
}

ex:
---

class Test 
{
	public static void main(String[] args)
	{
		int i = 100 << 2;
		
		System.out.println(i); // 100 * 4 = 400
 	}
}

8) Unary operators 
===================

Increment/Decrement operators 
=============================
We have two types of increment operators.

1) Post increment 
------------
	i++;

2) Pre increment 
-------------
	++i;

We have two types of decrement operators.


1) Post decrement 
-----------------
	i--;

2) Pre decrement 
-------------
	--i;

Post Increment/Decrement operator 
---------------------------------
Rule1 : First Take 
Rule2 : Then Change 

ex:
---

class Test 
{
	public static void main(String[] args)
	{
		int i = 10;
		
		i++;
		
		System.out.println(i); // 11
 	}
}

ex:
---

class Test 
{
	public static void main(String[] args)
	{
		int i = 10;
	
		System.out.println(i++); // 10
 	}
}

ex:
--

class Test 
{
	public static void main(String[] args)
	{
		int i = 10;
	
		int j = i++;
		
		System.out.println(i+" "+j); // 11   10
 	}
}

ex:
---

class Test 
{
	public static void main(String[] args)
	{
		int i = 10;
	
		int j = i++ + i++; // 10 + 11
		
		System.out.println(i+" "+j); // 12  21
 	}
}

ex:
---

class Test 
{
	public static void main(String[] args)
	{
		int i = 10;
	
		int j = i-- + i--; // 10 + 9 
		
		System.out.println(i+" "+j); // 8 19 
 	}
}

ex:
---

class Test 
{
	public static void main(String[] args)
	{
		int i = 10;
	
		int j = i++ + i++ + i--; // 10 + 11 + 12 
		
		System.out.println(i+" "+j); // 11   33
 	}
}



























































