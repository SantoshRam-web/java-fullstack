Stream API 
==========
Stream API introduced in Java 8.

Stream API present in java.util.stream package.

It allows functional style programming and makes our code simple and readable.

Stream API is used process collection of objects.

Stream API is used to perform bulk operations on Collections.

ex:
---
import java.util.*;
import java.util.stream.*;
class Test  
{
	public static void main(String[] args) 
	{
		List<Integer> list = List.of(6,9,1,3,5,2);
		
		List<Integer> newList = list.stream().filter(i-> i%2==0).collect(Collectors.toList());
		
		System.out.println(newList);
	}
}


ex:
---
import java.util.*;
import java.util.stream.*;
class Test  
{
	public static void main(String[] args) 
	{
		List<Integer> list = List.of(6,9,1,3,5,2);
		
		long result = list.stream().filter(i-> i%2==0).count();
		
		System.out.println(result);
	}
}

ex:
---
import java.util.*;
import java.util.stream.*;
class Test  
{
	public static void main(String[] args) 
	{
		List<Integer> list = List.of(6,1,8,3,9,4);
		
		List<Integer> newList = list.stream().sorted().collect(Collectors.toList());
		
		System.out.println(newList);
	}
}

ex:
---
import java.util.*;
import java.util.stream.*;
class Test  
{
	public static void main(String[] args) 
	{
		List<Integer> list = List.of(6,1,8,3,9,4);
		
		List<Integer> newList = list.stream().sorted(Comparator.reverseOrder()).collect(Collectors.toList());
		
		System.out.println(newList);
	}
}

ex:
----
import java.util.*;
import java.util.stream.*;
class Test  
{
	public static void main(String[] args) 
	{
		List<Integer> list = List.of(6,1,8,3,9,4);
		
		long small = list.stream().min((i1,i2)->i1.compareTo(i2)).get();
		
		System.out.println(small); 
	}
}

ex:
---
import java.util.*;
import java.util.stream.*;
class Test  
{
	public static void main(String[] args) 
	{
		List<Integer> list = List.of(6,1,8,3,9,4);
		
		long big = list.stream().max((i1,i2)->i1.compareTo(i2)).get();
		
		System.out.println(big); 
	}
}

ex:
---
import java.util.*;
import java.util.stream.*;
class Test  
{
	public static void main(String[] args) 
	{
		List<Integer> list = List.of(6,1,6,8,3,3,9,4,3,9);
		
		List<Integer> newList = list.stream().distinct().collect(Collectors.toList());
		
		System.out.println(newList);
		
	}
}


Q) Write a java program to compare two dates?


import java.time.*;
class Test  
{
	public static void main(String[] args) 
	{
		LocalDate date1 = LocalDate.now(); // 22-08-2025
		
		LocalDate date2 = LocalDate.of(2025,02,15); 
		
		if(date1.compareTo(date2)>0)
			System.out.println("Date1 is greatest");
		else if(date1.compareTo(date2)<0)
			System.out.println("Date2 is greatest");
		else
			System.out.println("Both are same");
		
	}
}

forEach() method 
================
A forEach() method introduced in Java 8.

It is used to iterate the objects from Collections.

ex:
---
import java.util.*;
class Test  
{
	public static void main(String[] args) 
	{
		List<Integer> list = List.of(6,1,9,2,4);
		
		list.forEach(ele -> System.out.print(ele+" "));
		
	}
}

ex:
--
import java.util.*;
class Test  
{
	public static void main(String[] args) 
	{
		Set<Integer> set = Set.of(8,1,3,9,6);
		
		set.forEach(ele -> System.out.print(ele+" "));
		
	}
}

ex:
---
import java.util.*;
class Test  
{
	public static void main(String[] args) 
	{
		Map<Integer,String> map = Map.of(1,"one",2,"two",3,"three");
		
		map.forEach((key,value) -> System.out.println(key+"="+value));
		
	}
}

Method Reference (::)
=====================
Method reference introduced in Java 8.

It is a special type of lamda expression.

It concise and readable way to refer to existing methods by name, serving as a shorthand for certain lambda expressions. 

ex:
---
import java.util.*;
class Test  
{
	public static void main(String[] args) 
	{
		List<Integer> list = List.of(6,9,1,3,5,4);
		
		list.forEach(System.out::println);
	}
}

ex:
---
import java.util.*;
class Test  
{
	public static void main(String[] args) 
	{
		Map<Integer,String> map = Map.of(1,"one",2,"two",3,"three");
		
		map.forEach(Test::entry);
	}
	public static void entry(Integer key,String value)
	{
		System.out.println(key+"="+value);
	}
}


Q) Write a java program to display employees information in sorting order of employee id?

import java.util.*;
import java.util.stream.*;
class Employee
{
	private int empId;
	private String empName;
	private double empSal;
	
	Employee(int empId,String empName,double empSal)
	{
		this.empId=empId;
		this.empName=empName;
		this.empSal=empSal;
	}
	//getter methods 
	public int getEmpId()
	{
		return empId;
	}
	public String getEmpName()
	{
		return empName;
	}
	public double getEmpSal()
	{
		return empSal;
	}
	
	//toString() method 
	public String toString()
	{
		return empId+" "+empName+" "+empSal;
	}
}
class Test 
{
	public static void main(String[] args)
	{
		List<Employee> list = new ArrayList<Employee>();
		list.add(new Employee(104,"Alan",4000d));
		list.add(new Employee(102,"Kelvin",2000d));
		list.add(new Employee(103,"Mark",3000d));
		list.add(new Employee(101,"Jose",1000d));
		
		List<Employee> newList = list.stream().sorted(Comparator.comparingInt(Employee::getEmpId)).collect(Collectors.toList());
		
		newList.forEach(emp -> System.out.println(emp));
	}
}

Q) Write a java program to display employees information in sorting order of employee name?

import java.util.*;
import java.util.stream.*;
class Employee
{
	private int empId;
	private String empName;
	private double empSal;
	
	Employee(int empId,String empName,double empSal)
	{
		this.empId=empId;
		this.empName=empName;
		this.empSal=empSal;
	}
	//getter methods 
	public int getEmpId()
	{
		return empId;
	}
	public String getEmpName()
	{
		return empName;
	}
	public double getEmpSal()
	{
		return empSal;
	}
	
	//toString() method 
	public String toString()
	{
		return empId+" "+empName+" "+empSal;
	}
}
class Test 
{
	public static void main(String[] args)
	{
		List<Employee> list = new ArrayList<Employee>();
		list.add(new Employee(104,"Alan",4000d));
		list.add(new Employee(102,"Kelvin",2000d));
		list.add(new Employee(103,"Mark",3000d));
		list.add(new Employee(101,"Jose",1000d));
		
		List<Employee> newList = list.stream().sorted(Comparator.comparing(Employee::getEmpName)).collect(Collectors.toList());
		
		newList.forEach(emp -> System.out.println(emp));
	}
}
















































