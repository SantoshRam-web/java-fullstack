Main method 
============
Our program contains main method not not. Either it is properly declared or not. It is not a responsibility of a compiler to check. It is a liability of a JVM to check for main method.
If JVM won't find main method then it will throw one runtime error called main method not found.

JVM always look for main method with following signature.

signature
---------
	public static void main(String[] args)

If we perform any changes in above signature then JVM will throw one runtime error called main method not found.


Q) Explain main method in java?

public 
------
	JVM wants to call main method from anywhere.

static
------
	JVM wants to call main method without using object reference.

void 
----
	Main method does not return anything to JVM.

main
-----
	It is a identifier given to a main method.

String[] args
----------
	It is a command line argument.

We can perform following changes in main method.

1) Order of modifiers is not important incase of public static we can declare static public also.
 ex:
	static public void main(String[] args)


2) We can declare String[] in following acceptable formats.
   ex:
	public static void main(String[] args)
	public static void main(String   []args)
	public static void main(String args[])		

3) We can change String[] with var-arg parameter.
   ex:
	public static void main(String... args)	

4) We can replace args with any java valid identifier.
   ex:
	public static void main(String[] ihub)	

5) Main method will accept following modifiers.
   ex:
	synchronized, strictfp and final.



Command line argument 
===================
Arguments which are passing through command prompt such type of arguments are called command line arguments.

In command line arguments we need to pass our input values at runtime command.

ex:
	javac   Test.java

	java    Test  101  Alan  M  1000.0  
			|   |    |    |______ args[3]	
			|   |    |___________ args[2]
			|   |________________ args[1]
			|____________________ args[0] 

ex:
---
class Test
{
	public static void main(String[] args)
	{
		System.out.println(args[0]);
		System.out.println(args[1]);
		System.out.println(args[2]);
		System.out.println(args[3]);	
	}
}

Note:
-----
To read the inputs from the enduser we will use command line argument.


System.out.println()
=====================
It is a output statement in java.

Whenever we want to display any userdefined statements or data or expression then we need to use output stmt.

syntax:
-------	
	static variable 
		|
	System.out.println();
	|		|
predefined 		predefined method 
final class 

Diagram: class13.1

ex:
----
class Test
{
	public static void main(String[] args)
	{
		System.out.println("stmt1");
		System.out.println("stmt2");
	}
}
o/p:
	stmt1
	stmt2

ex:
---
class Test
{
	public static void main(String[] args)
	{
		System.out.print("stmt1");
		System.out.print("stmt2");
	}
}
o/p:
	stmt1stmt2

ex:
--
class Test
{
	public static void main(String[] args)
	{
		double d= 10.1234567890d;
		System.out.printf("%.2f",d);
	}
}

Various ways to display the data 
--------------------------------
1) 
	custom message
   	ex:
		System.out.println("Welcome to Java");

2)
	int i = 10;
	ex:
		System.out.println(i);	// 10
		System.out.println("The value is ="+i); 
	
3) 
	int i=10,j=20;
	ex:
		System.out.println(i+" "+j); 
		System.out.println(i+" and "+j);

4) 
	int a=10,b=20,c=30;
	ex:
		Syste.out.println(a+" "+b+" "+c);




Q) What is the difference between System.out.println() and System.err.println()?

System.out.println()
-------------------
It is used to display standard output in java.
It is used to display the output only on console.

ex:
class Test
{
	public static void main(String[] args)
	{
		System.out.println("Standard output");
	}
}

System.err.println()
------------------
It is used to display error output in java.

It is used to display the output on console as well as it redirects the output to physical file.
  
ex:
---
class Test
{
	public static void main(String[] args)
	{
		System.err.println("Error output");
	}
}

javac   Test.java
java    Test 2>abc.txt 

Q) What is literal ?

A value which is assigned to a variable is called literal.

A value which is not change during the program execution is called literal.

ex:
	int  i = 10; 
	 |   |	  |_____ value of a variable / literal 
	 |   |__________ variable name / identifier 
	 |______________ datatype / keyword 	


Java Source File Structure 
==========================
case1:
------
	A java program can have multiple classes.

case2:
------
	If a java program contains multiple classes then we need to check 
	which class contains main method and that class treated as main class.
	ex:
		Test.java
		-----------
		class A 
		{
			-
			-
		}
		class Test 
		{
			public static void main(String[] args)
			{
				-
				-
			}		
		}
	

case3:
------
	If a java program contains multiple class with main method then we can save 
	that program name with any name. 
	ex:
		Ihub.java
		-------
		class A
		{
			public static void main(String[] args)
			{
				System.out.println("A-class");
			}
		}
		class B
		{
			public static void main(String[] args)
			{
				System.out.println("B-class");
			}
		}
		class C
		{
			public static void main(String[] args)
			{
				System.out.println("C-class");
			}
		}
		
	If we compile above program we will get three .class files i.e 
	A.class, B.class and C.class.
	ex:
		javac   Ihub.java

		java  A (A class will execute)
		java  B (B class will execute)
		java  c (C class will execute)

case4:
------
	If a java program contains multiple class with main method then we need to 
	declare one class as public and that public class treated as main class.
	ex:
		A.java
		-------
		public class A
		{
			public static void main(String[] args)
			{
				System.out.println("A-class");
			}
		}
		class B
		{
			public static void main(String[] args)
			{
				System.out.println("B-class");
			}
		}
		class C
		{
			public static void main(String[] args)
			{
				System.out.println("C-class");
			}
		}
		
	If we compile above program we will get three .class files i.e 
	A.class, B.class and C.class.
	ex:
		javac   A.java

		java  A (A class will execute)
		java  B (B class will execute)
		java  c (C class will execute)	


























