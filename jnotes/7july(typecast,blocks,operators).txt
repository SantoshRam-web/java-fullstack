Typecasting 
===========
The process of converting from one datatype to another datatype is called typecasting.

There are two ways to perform typecasting in java.

1) Implicit typecasting 

2) Explicit typecasting 

1) Implicit typecasting 
-----------------------
If we want to store small value into a bigger variable then we need to use implicit typecasting.

A compiler is responsible to perform implicit typecasting.

There is no possibility to loss the information.

It is also known as Widening or Upcasting.

We can perform implicit typecasting as follow.

ex:
	byte 	-->	short
				-->
					int  -->  long  --> float --> double
				-->		
			char 

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		byte b = 10;
		
		short s = b;
		
		System.out.println(s); 
	}
}

ex:
---

class Test  
{
	public static void main(String[] args) 
	{
		char ch = 'a';
		
		long l = ch;
		
		System.out.println(l); // 97 
	}
}

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		int i = 10;
		
		double d = i;
		
		System.out.println(d); // 10.0
	}
}

2) Explicit typecasting 
--------------------------
If we want to store bigger value into a smaller variable then we need to use explicit typecasting.

A programmer is responsible to perform explicit typecasting.

There is a possibility to loss the information.

It is also known as Narrowing or Downcasting.

We can perform explicit typecasting as follow.

ex:
	byte 	<--	short
				<--
					int  <--  long  <-- float <-- double
				<--		
			char 
	
ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		float f = 10.56f;
		
		int i = (int) f;
		
		System.out.println(i); // 10
	}
}

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		int i = 65;
		
		char ch = (char) i;
		
		System.out.println(ch); // A
	}
}

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		int i = 130;
		
		byte b = (byte) i;
		
		System.out.println(b); // -126
	}
}


Types of blocks 
================
A block is a set of statements which is enclosed in a curly braces i.e {}.

We have three types of blocks in java.

1) Instance block 

2) Static block 

3) Local block 


1) Instance block 
-----------------
Instance block is used to initialize the instance variables.

Instance block will execute at the time of object creation.

Instance block must and should declare immediately after the class but not inside methods and constructors.

We can declare instance block as follow.

syntax:
------
	//instance block
	{
		-
		- //set of statements 
		-
	}

ex:
---
class Test  
{
	//instance block 
	{
		System.out.println("instance-block");
	}
	
	public static void main(String[] args) 
	{
		System.out.println("main-method");	
	}
}
o/p:
	main-method 

ex:
----
class Test  
{
	//instance block 
	{
		System.out.println("instance-block");
	}
	
	public static void main(String[] args) 
	{
		System.out.println("main-method");	
		Test t = new Test();
	}
}
o/p:
	main-method 
	instance-block

ex:
---
class Test  
{
	//instance block 
	{
		System.out.println("instance-block");
	}
	
	public static void main(String[] args) 
	{
		Test t1=new Test();
		System.out.println("main-method");	
		Test t2 = new Test();
	}
}
o/p:
	instance-block 
	main-method 
	instance-block

ex:
----
class Test  
{
	//instance variable 
	int i;
	
	//instance block 
	{
		i = 100;
	}
	
	public static void main(String[] args) 
	{
		Test t = new Test();
		System.out.println(t.i);  // 100
	}
}


2) Static block
------------------
Static block is used to initialize the static variables.

Static block executed at the time of classloading.

Static block must and should declare immediately after the class using static keyword but not inside methods and constructors.

We can declare static block as follow.

syntax:
-----
	//static block 
	static
	{
		-
		- // set of statements 
		-
	}

ex:
---
class Test  
{
	//static block 
	static
	{
		System.out.println("static-block");
	}
	
	public static void main(String[] args) 
	{
		System.out.println("main-method"); 
	}
}
o/p:
	static-block 
	main-method 

ex:
---
class Test  
{
	//instance block 
	{
		System.out.println("instance-block");
	}
	
	//static block 
	static
	{
		System.out.println("static-block");
	}
	
	public static void main(String[] args) 
	{
		System.out.println("main-method"); 
		Test t = new Test();
	}
}
o/p:
	static-block '
	main-method 
	instance-block 

ex:
----
class Test  
{
	//static variable 
	static int i;
	
	//static block 
	static
	{
		i = 200;
	}
	
	public static void main(String[] args) 
	{
		System.out.println(i); // 200
	}
}

3) Local block 
---------------
Local block is used to initialize the local variables.

Local block executes just like a normal statement.

Local block must and should declare inside methods and constructors.

We can declare local block as follow.

syntax:
-------
	//local block 
	{
		-
		- // set of statement 
		-
	}

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		System.out.println("stmt1");
		
		//local block 
		{
			System.out.println("stmt2");
		}
		
		System.out.println("stmt3");
	}
}
o/p:
	stmt1
	stmt2
	stmt3

ex:
----
class Test  
{
	public static void main(String[] args) 
	{
		// local variable 
		int i;
		
		//local block 
		{
			i = 300;
		}
		
		System.out.println(i); // 300
	}
}


Q) Can we execute java program without main method?

Yes, untill 1.6 version it is possible to execute java program without main method using static block. But from 1.7 version onwards it is not possible to execute java program without main method.

ex:
--
class Test  
{
	//static block 
	static
	{
		System.out.println("Hello World");
		System.exit(0);
	}
}


Operators 
==========
Operator is a symbol which is used to perform some operations on operands.

ex:
	c = a + b;

	Here a,b and c are operands. 
	Here = and + are operators.

We have following list of operators in java.

1) Assignment operators 

2) Conditional/Ternary operators 

3) Logical operators 

4) Bitwise operators 

5) Arithmetic operators 

6) Relational operators 

7) Shift operators 

8) Unary operators 

1) Assignment operators
-----------------------

ex:
---
class Test  
{
	public static void main(String[] args)
	{
		int i = 10;
		
		i = 20;
		
		i = 30;
		
		System.out.println(i); // 30
	}
}
Note:
-----
	Reinitialization is possible in java.


ex:
----
class Test  
{
	public static void main(String[] args)
	{
		final int i = 10;
		
		i = 20;
		
		i = 30;
		
		System.out.println(i); // C.T.E 
	}
}

Note:
-----
	We can't modify final variable 

ex:
---
class Test  
{
	public static void main(String[] args)
	{
		int i = 1,2,3,4,5;
		
		System.out.println(i); // C.T.E 
	}
}

ex:
---
class Test  
{
	public static void main(String[] args)
	{
		int i = 10;
		
		i+=5; // i = i + 5;
		
		System.out.println(i); //15
	}
}

ex:
---
class Test  
{
	public static void main(String[] args)
	{
		int i = 10;
		
		i-=15; // i = i - 15;
		
		System.out.println(i); //-5
	}
}

ex:
---
class Test  
{
	public static void main(String[] args)
	{
		int i = 10;
		
		i *= 5; // i = i * 5;
		
		System.out.println(i); //50
	}
}

ex:
---
class Test  
{
	public static void main(String[] args)
	{
		int i = 10;
		
		i/=2;
		
		System.out.println(i); // 5
		
		
		int j = 10;
		
		j/=20;
		
		System.out.println(j); // 0
	}
}

ex:
---
class Test  
{
	public static void main(String[] args)
	{
		int i = 10;
		
		i%=2;
		
		System.out.println(i); // 0
		
		
		int j = 10;
		
		j%=20;
		
		System.out.println(j); // 10
	}
}

2) Conditional / Ternary operator 
---------------------------------
syntax:
------
	(condition)?value1:value2;

ex:
---
class Test  
{
	public static void main(String[] args)
	{
		boolean b = (5>2)?true:false;
		System.out.println(b); // true 
	}
}


ex:
---
class Test  
{
	public static void main(String[] args)
	{
		String str = (5>20)?"Hi":"Bye";
		System.out.println(str); // Bye  
	}
}

ex:
--
class Test  
{
	public static void main(String[] args)
	{
		int i = (5>10)?1:0;
		System.out.println(i); // 0
	}
}

ex:
---
class Test  
{
	public static void main(String[] args)
	{
		char ch = (5>2)?'T':'F';
		System.out.println(ch); // T 
	}
}

Q) Write a java program to find out greatest of two numbers?

import java.util.Scanner;
class Test  
{
	public static void main(String[] args)
	{
		Scanner sc = new Scanner(System.in);
		
		System.out.println("Enter the first number :");
		int a = sc.nextInt();
		
		System.out.println("Enter the second number :");
		int b = sc.nextInt();
		
		int max = (a>b)?a:b;
		
		System.out.println(max+" is greatest");
	}
}


Q) Write a java program to find out greatest of three numbers?


import java.util.Scanner;
class Test  
{
	public static void main(String[] args)
	{
		Scanner sc = new Scanner(System.in);
		
		System.out.println("Enter the first number :");
		int a = sc.nextInt();
		
		System.out.println("Enter the second number :");
		int b = sc.nextInt();
		
		System.out.println("Enter the third number :");
		int c = sc.nextInt();
		
		int max = (a>b)?((a>c)?a:c):((b>c)?b:c);
		
		System.out.println(max+" is greatest");
	}
}
















































































































 


























































































