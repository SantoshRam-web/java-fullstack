Var-arg method 
===============
Untill 1.4 version it is not possible to declare a method with variable number of arguments.

But from 1.5 version onwards it is possibel to declare a method with variable number of arguments.

In real world scenario var-arg method is used when number of inputs to a method is not fixed or not known by the user.

We can declare var-arg method as follow.
ex:
			  var-arg parameter
			    |
		        --------
	void  methodOne(int... i)
			    |
			ellipse 

Note:
-----
	A var-arg parameter is a replacement of single dimensional array.
	ex:
		...  -----> [] 

We can call var-arg method with any number of integer values including zero.

ex:
----
class Test
{
	public static void main(String[] args)
	{
		methodOne();
		methodOne(10);
		methodOne(10,20);
		methodOne(10,20,30);	
	}
	public static void methodOne(int... i)
	{
		System.out.println("var-arg method");	
	}
}

ex:2
-----
class Test
{
	public static void main(String[] args)
	{
		String str = String
			.format("Student No : %d \nStudent Name : %s",101,"Alan");
		System.out.println(str); 	
	}
}

case1:
------
	We can mix var-arg parameter with general parameters.
	ex:
		void methodOne(int i,int... j)

case2:
------
	If we mix var-arg parameter with general parameters then var-arg parameter must be 
	last parameter.
	ex:
		void methodOne(int i,int... j)  //valid 
		void methodOne(int... i,int  j) //invalid 

case3:
------
	A var-arg method can have only one var-arg parameter.
	ex:
		void methodOne(int... i)   //valid 
		void methodOne(int... i,int... j)  //invalid 


Fully Qualified Name 
====================
Fully qualified name means we will declare a class or interface along with package name.
ex:
	java.lang.System (C)
	java.lang.Runnable (I) 

Fully qualified name will increase readability of our code.

In real world scenario we will use fully qualified name when a class or interface present in two different packages.
ex:
	java.util.Date (C) 
	java.sql.Date  (C) 

ex:
---
class Test
{
	public static void main(String[] args)
	{
		java.util.Date d = new java.util.Date();
		System.out.println(d);	
	}
}
	

Import Statements 
=================
Whenever we use import statement we should not use fully qualified name.

Using short name also we can achieve.

We have three types of import statements in java.

1) Explicit class import 

2) Implicit class import 

3) Static import 


1) Explicit class import
--------------------------
This type of import statement is highly recommanded to use because it will increase the readability of our code.

ex:
----
import java.util.Date;
import java.time.LocalDate;
import java.time.LocalTime;
class Test
{
	public static void main(String[] args)
	{
		Date d = new Date();
		System.out.println(d); 

		LocalDate date = LocalDate.now(); 
		System.out.println(date);

		LocalTime time = LocalTime.now();
		System.out.println(time); 
	}
}

2) Implicit class import
------------------------
This type of import statement is not recommanded to use because it will reduce readability of our code.

ex:
---
import java.util.*;
import java.time.*;
class Test
{
	public static void main(String[] args)
	{
		Date d = new Date();
		System.out.println(d); 

		LocalDate date = LocalDate.now(); 
		System.out.println(date);

		LocalTime time = LocalTime.now();
		System.out.println(time); 
	}
}

3) Static import 
---------------
Using static import we can call static members directly.

Often use of static import makes our program complex and unreadable.

ex:
---
import static java.lang.System.*;
class Test
{
	public static void main(String[] args)
	{
		out.println("stmt1");
		out.println("stmt2");
		out.println("stmt3");		
	}
}


ex:
---
import static java.lang.System.*;
class Test
{
	public static void main(String[] args)
	{
		out.println("stmt1");
		exit(0);
		out.println("stmt3");		
	}
}



EditPlus Editor 
===============
Download link : https://www.editplus.com/download.html



Java Basic Programs 
====================

Q) Write a java program to perform sum of two numbers?


import java.util.Scanner;
class Example1 
{
	public static void main(String[] args) 
	{
		Scanner sc = new Scanner(System.in);	
		
		System.out.println("Enter the first number :");
		int a = sc.nextInt();
		
		System.out.println("Enter the second number :");
		int b = sc.nextInt();
		
		//logic 
		int c = a + b;
		
		System.out.println("sum of two numbers is ="+c);
	}
}

Q) Write a java program to perform square of a given number?

input:
	5

output:
	25

import java.util.Scanner;
class Example2
{
	public static void main(String[] args) 
	{
		Scanner sc = new Scanner(System.in);	
		
		System.out.println("Enter the number :");
		int n = sc.nextInt(); // 5 
		
		//logic 
		int square = n * n;
		
		System.out.println("square of a given number is ="+square);
	}
}

Assignment
=========
Q) Write a java program to find out cube of a given number?
















































